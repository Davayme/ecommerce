// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  roleId    Int
  role      Role     @relation(fields: [roleId], references: [id])
  createdAt DateTime @default(now())
  orders    Order[]
  addresses Address[]
  @@map("users")
}

model Role {
  id        Int      @id @default(autoincrement()) 
  name      String   @unique
  users     User[]
  createdAt DateTime @default(now())

  @@map("roles")
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("categories")
}

model Product {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  price       Float
  stock       Int
  images      String[] // puedes usar un array de URLs
  status      Boolean   @default(true) // true = activo, false = desactivado
  categoryId  Int
  category    Category  @relation(fields: [categoryId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  orderItems OrderItem[]
  @@map("products")
}

model Order {
  id           Int          @id @default(autoincrement())
  userId       Int
  addressId    Int
  total        Float        // Total con IVA incluido
  subtotal     Float        // Total sin IVA
  iva          Float        // Monto de IVA aplicado al pedido
  status       OrderStatus  @default(PENDING)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  user         User         @relation(fields: [userId], references: [id])
  address      Address      @relation(fields: [addressId], references: [id])
  items        OrderItem[]

  @@map("orders")
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELED
}

model OrderItem {
  id         Int      @id @default(autoincrement())
  orderId    Int
  productId  Int
  quantity   Int
  price      Float    
  total      Float     
  order      Order     @relation(fields: [orderId], references: [id])
  product    Product   @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Address {
  id          Int      @id @default(autoincrement())
  userId      Int
  name        String   // "Casa", "Oficina", etc
  street      String
  city        String
  province    String
  postalCode  String
  reference   String?
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
  orders      Order[]
  @@map("addresses")
}

model IVAConfig {
  id          Int      @id @default(1)
  percentage  Float    // 12.0 = 12%
  updatedAt   DateTime @updatedAt

  @@map("iva_config")
}